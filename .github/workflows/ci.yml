# Copyright 2024 Tobias Loew
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - develop
      - feature/**

env:
  UBSAN_OPTIONS: print_stacktrace=1
  NET_RETRY_COUNT: 5

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolset: gcc-4.8
            cxxstd: "11"
            os: ubuntu-latest
            container: ubuntu:18.04
            install: g++-4.8
          - toolset: gcc-5
            cxxstd: "11,14,1z"
            os: ubuntu-latest
            container: ubuntu:18.04
            install: g++-5
          - toolset: gcc-6
            cxxstd: "11,14,1z"
            os: ubuntu-latest
            container: ubuntu:18.04
            install: g++-6
          - toolset: gcc-7
            cxxstd: "11,14,17"
            os: ubuntu-20.04
            install: g++-7
          - toolset: gcc-8
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
            install: g++-8
          - toolset: gcc-9
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
          - toolset: gcc-10
            cxxstd: "11,14,17,2a"
            os: ubuntu-22.04
            install: g++-10
          - toolset: gcc-11
            cxxstd: "11,14,17,20,23"
            os: ubuntu-22.04
          - toolset: gcc-12
            cxxstd: "11,14,17,20,23"
            os: ubuntu-22.04
            install: g++-12
          - toolset: gcc-13
            cxxstd: "11,14,17,20,23"
            os: ubuntu-latest
            container: ubuntu:24.04
            install: g++-13
          - toolset: gcc-14
            cxxstd: "11,14,17,20,23,26"
            os: ubuntu-latest
            container: ubuntu:24.04
            install: g++-14
          - toolset: clang
            compiler: clang++-3.9
            cxxstd: "11,14"
            os: ubuntu-latest
            container: ubuntu:18.04
            install: clang-3.9
          - toolset: clang
            compiler: clang++-4.0
            cxxstd: "11,14"
            os: ubuntu-latest
            container: ubuntu:18.04
            install: clang-4.0
          - toolset: clang
            compiler: clang++-5.0
            cxxstd: "11,14,1z"
            os: ubuntu-latest
            container: ubuntu:18.04
            install: clang-5.0
          - toolset: clang
            compiler: clang++-6.0
            cxxstd: "11,14,17"
            os: ubuntu-20.04
            install: clang-6.0
          - toolset: clang
            compiler: clang++-7
            cxxstd: "11,14,17"
            os: ubuntu-20.04
            install: clang-7
          - toolset: clang
            compiler: clang++-8
            cxxstd: "11,14,17"
            os: ubuntu-20.04
            install: clang-8
          - toolset: clang
            compiler: clang++-9
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
            install: clang-9
          - toolset: clang
            compiler: clang++-10
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
          - toolset: clang
            compiler: clang++-11
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
          - toolset: clang
            compiler: clang++-12
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
          - toolset: clang
            compiler: clang++-13
            cxxstd: "11,14,17,20,2b"
            os: ubuntu-latest
            container: ubuntu:22.04
            install: clang-13
          - toolset: clang
            compiler: clang++-14
            cxxstd: "11,14,17,20,2b"
            os: ubuntu-latest
            container: ubuntu:22.04
            install: clang-14
          - toolset: clang
            compiler: clang++-15
            cxxstd: "11,14,17,20,2b"
            os: ubuntu-latest
            container: ubuntu:22.04
            install: clang-15
          - toolset: clang
            compiler: clang++-16
            cxxstd: "11,14,17,20,2b"
            os: ubuntu-latest
            container: ubuntu:24.04
            install: clang-16
          - toolset: clang
            compiler: clang++-17
            cxxstd: "11,14,17,20,23,26"
            os: ubuntu-latest
            container: ubuntu:24.04
            install: clang-17
          - toolset: clang
            compiler: clang++-18
            cxxstd: "11,14,17,20,23,26"
            os: ubuntu-latest
            container: ubuntu:24.04
            install: clang-18
          - toolset: clang
            compiler: clang++-19
            cxxstd: "11,14,17,20,23,26"
            os: ubuntu-latest
            container: ubuntu:24.04
            install: clang-19
          - toolset: clang
            cxxstd: "11,14,17,20,2b"
            os: macos-13
          - toolset: clang
            cxxstd: "11,14,17,20,2b"
            os: macos-14
          - toolset: clang
            cxxstd: "11,14,17,20,2b"
            os: macos-15

    runs-on: ${{matrix.os}}
    container: ${{matrix.container}}

    defaults:
      run:
        shell: bash

    steps:
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Setup container environment
        if: matrix.container
        run: |
          apt-get update
          apt-get -y install sudo python3 git g++
          apt remove -y libcurl4
          apt install -y libcurl4 curl

      - name: Install packages
        if: matrix.install
        run: |
          sudo apt-get update
          sudo apt-get -y install ${{matrix.install}}

      - name: Setup Boost
        run: |
          echo on
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "main" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          mkdir -p snapshot
          cd snapshot
          echo "Downloading library snapshot: https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          curl -L --retry "$NET_RETRY_COUNT" -o "${LIBRARY}-${GITHUB_SHA}.tar.gz" "https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          tar -xf "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          if [ ! -d "${LIBRARY}-${GITHUB_SHA}" ]
          then
              echo "Library snapshot does not contain the library directory ${LIBRARY}-${GITHUB_SHA}:"
              ls -la
              exit 1
          fi
          rm -f "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          cd ..
          git clone -b $BOOST_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          mkdir -p libs
          rm -rf "libs/$LIBRARY"
          mv -f "../snapshot/${LIBRARY}-${GITHUB_SHA}" "libs/$LIBRARY"
          rm -rf "../snapshot"
          git submodule update --init tools/boostdep
          git submodule update --init libs/core
          git submodule update --init libs/assert
          python3 tools/boostdep/depinst/depinst.py --git_args "--jobs 3" %LIBRARY%
          echo GITHUB_WORKSPACE: $GITHUB_WORKSPACE
          ./bootstrap.sh
          ./b2 -d0 headers

      - name: Create user-config.jam
        if: matrix.compiler
        run: |
          echo "using ${{matrix.toolset}} : : ${{matrix.compiler}} ;" > ~/user-config.jam

      - name: Run tests
        run: |
          cd boost-root
          ./b2 -j3 libs/$LIBRARY/test toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} variant=debug,release

  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolset: msvc-14.0
            cxxstd: "11,14"
            addrmd: 32,64
            os: windows-2022
            msvcver: 2017
            environment_script: 'call "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Auxiliary/Build/vcvars64.bat"'
          - toolset: msvc-14.0
            cxxstd: "11,14"
            addrmd: 32,64
            os: windows-2025
            msvcver: 2017
            environment_script: 'call "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Auxiliary/Build/vcvars64.bat"'
          - toolset: msvc-14.1
            cxxstd: "11,14,17,20,latest"
            addrmd: 32,64
            os: windows-2022
            msvcver: 2017
            environment_script: 'call "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Auxiliary/Build/vcvars64.bat"'
          - toolset: msvc-14.1
            cxxstd: "11,14,17,20,latest"
            addrmd: 32,64
            os: windows-2025
            msvcver: 2017
            environment_script: 'call "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Auxiliary/Build/vcvars64.bat"'
          - toolset: msvc-14.0
            cxxstd: "11,14"
            addrmd: 32,64
            os: windows-2022
            msvcver: 2019
          - toolset: msvc-14.0
            cxxstd: "11,14"
            addrmd: 32,64
            os: windows-2025
            msvcver: 2019

          # commented since it does not find cl.exe, but msvc-14.1 is tested anyway with VS 2017 above 
          # - toolset: msvc-14.1
          #   cxxstd: "11,14,17,20,latest"
          #   addrmd: 32,64
          #   os: windows-2019
          #   msvcver: 2019
          #   environment_script: 'call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"'

          - toolset: msvc-14.2
            cxxstd: "14,17,20,latest"
            addrmd: 32,64
            os: windows-2022
            msvcver: 2019
          - toolset: msvc-14.2
            cxxstd: "14,17,20,latest"
            addrmd: 32,64
            os: windows-2025
            msvcver: 2019
          - toolset: msvc-14.3
            cxxstd: "14,17,20,latest"
            addrmd: 32,64
            os: windows-2022
            msvcver: 2022
          - toolset: msvc-14.3
            cxxstd: "14,17,20,latest"
            addrmd: 32,64
            os: windows-2025
            msvcver: 2022
          - toolset: clang-win
            cxxstd: "14,17,latest"
            addrmd: 32,64
            os: windows-2022
            msvcver: 2022
          - toolset: clang-win
            cxxstd: "14,17,latest"
            addrmd: 32,64
            os: windows-2025
            msvcver: 2022
          - toolset: gcc
            cxxstd: "11,14,17,2a"
            addrmd: 64
            os: windows-2022
            msvcver: 2019
            set_env: "set GCC_ON_WINDOWS=1"
          - toolset: gcc
            cxxstd: "11,14,17,2a"
            addrmd: 64
            os: windows-2025
            msvcver: 2019
            set_env: "set GCC_ON_WINDOWS=1"

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3
  
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  

      - name: Install MSVC 2017
        id: install_msvc_2017
        if: ( matrix.msvcver == 2017 )
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          choco install visualstudio2017community
          choco install visualstudio2017-workload-nativedesktop
          choco install visualstudio2017-workload-vctools
  

      - name: Install MSVC v141 component for VS 2019
        id: install_msvc_v141_component_vs_2019
        if: (( matrix.msvcver == 2019 ) && ( matrix.toolset == 'msvc-14.1' ))
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          choco install -y visualstudio2019enterprise --package-parameters="'--add Microsoft.VisualStudio.Component.VC.v141.x86.x64'"

      - name: Install MSVC v141 component for VS 2022
        id: install_msvc_v141_component_vs_2022
        if: (( matrix.msvcver == 2022 ) && ( matrix.toolset == 'msvc-14.1' ))
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          choco install -y visualstudio2022enterprise --package-parameters="'--add Microsoft.VisualStudio.Component.VC.v141.x86.x64'"

      - name: Install MSVC v142 component for VS 2019
        id: install_msvc_v142_component_vs_2019
        if: (( matrix.msvcver == 2019 ) && ( matrix.toolset == 'msvc-14.2' ))
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          choco install -y visualstudio2019enterprise --package-parameters="'--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64'"

      - name: Install MSVC v142 component for VS 2022
        id: install_msvc_v142_component_vs_2022
        if: (( matrix.msvcver == 2022 ) && ( matrix.toolset == 'msvc-14.2' ))
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          choco install -y visualstudio2022enterprise --package-parameters="'--add Microsoft.VisualStudio.ComponentGroup.VC.Tools.142.x86.x64'"

      - name: Setup Boost
        shell: cmd
        run: |
          [ -n "${{ matrix.environment_script }}" ] && "${{ matrix.environment_script }}"

          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          xcopy /s /e /q %GITHUB_WORKSPACE% libs\%LIBRARY%\
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" %LIBRARY%
          cmd /c bootstrap
          b2 --verbose -d0 headers

      - name: Run tests
        shell: cmd
        run: |
          [ -n "${{ matrix.environment_script }}" ] && "${{ matrix.environment_script }}"
          ${{ matrix.set_env }}

          cd ../boost-root
          b2 --verbose -j3 libs/%LIBRARY%/test toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} address-model=${{matrix.addrmd}} variant=debug,release embed-manifest-via=linker

  cuda-linux:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
  
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - uses: Jimver/cuda-toolkit@v0.2.21
        with:
          cuda: '12.5.0'
          linux-local-args: '["--toolkit"]'
          
      - name: Setup Boost
        run: |
          cd ..
          git clone --depth 1 https://github.com/boostorg/assert
          git clone --depth 1 https://github.com/boostorg/config
          git clone --depth 1 https://github.com/boostorg/core

      - name: Run Tests
        run: |
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++11 -c test/test_basics.cpp
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/test_disable_complement.cpp
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++17 -c test/test_rel_ops.cpp
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++11 -c test/test_utilities.cpp
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/order_pizza.cpp
          ! nvcc -x cu -DTEST_COMPILE_FAIL -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/test_fail.cpp
          echo failed-as-expected
          ! nvcc -x cu -DTEST_COMPILE_FAIL_WITH_ENABLED -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/test_incompat.cpp
          echo failed-as-expected
          ! nvcc -x cu -DTEST_COMPILE_FAIL_WITH_NOT_ENABLED -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/test_incompat.cpp
          echo failed-as-expected


  cuda-windows:
    runs-on: [windows-2022, windows-2025]

    steps:
      - uses: actions/checkout@v3
  
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - uses: Jimver/cuda-toolkit@v0.2.21
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Boost
        run: |
          cd ..
          git clone --depth 1 https://github.com/boostorg/assert
          git clone --depth 1 https://github.com/boostorg/config
          git clone --depth 1 https://github.com/boostorg/core

      - name: Run Tests
        shell: cmd
        run: |
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -c test/test_basics.cpp || exit /b
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -c test/test_disable_complement.cpp || exit /b
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -c test/test_rel_ops.cpp || exit /b
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -c test/test_utilities.cpp || exit /b
          nvcc -x cu -I ./include -I ../assert/include -I ../config/include -I ../core/include -c test/order_pizza.cpp || exit /b
          nvcc -x cu -DTEST_COMPILE_FAIL -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/test_fail.cpp && exit /b
          (call )
          echo failed-as-expected
          nvcc -x cu -DTEST_COMPILE_FAIL_WITH_ENABLED -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/test_incompat.cpp && exit /b
          (call )
          echo failed-as-expected
          nvcc -x cu -DTEST_COMPILE_FAIL_WITH_NOT_ENABLED -I ./include -I ../assert/include -I ../config/include -I ../core/include -std=c++14 -c test/test_incompat.cpp && exit /b
          (call )
          echo failed-as-expected

